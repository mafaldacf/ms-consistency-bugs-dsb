- name: Prepare clients
  hosts: dsb_mediamicroservices
  become: yes
  vars:
    base_folder_dir: "../../.."

  tasks:
    - name: Copy register_movies.sh file
      copy:
        src: "{{ base_folder_dir }}/scripts/register_movies.sh"
        dest: "/home/{{ ansible_user }}/register_movies.sh"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0755

    - name: Remove previous register_movies.log if it exists
      file:
        path: /home/{{ ansible_user }}/register_movies.log
        state: absent

- name: Run clients
  hosts: dsb_mediamicroservices
  become: yes
  vars:
    base_folder_dir: "../../.."
    start_unix: "{{ ((ansible_date_time.epoch | int) // 60 + 1) * 60 }}" # next full minute

  tasks:
    - name: Convert unix timestamp to datetime on remote host (because of time zones)
      shell: date -d @{{ start_unix }} "+%H:%M %Y-%m-%d"
      register: remote_datetime
      changed_when: false

    - name: Set start_at_datetime from remote conversion
      set_fact:
        start_at_datetime: "{{ remote_datetime.stdout }}"

    - name: Schedule register_movies.sh to run at {{ start_at_datetime }}
      shell: |
        echo '/home/{{ ansible_user }}/register_movies.sh > /home/{{ ansible_user }}/register_movies.log {{ inventory_hostname }} 2>&1' | at '{{ start_at_datetime }}'
      args:
        executable: /bin/bash

    - name: Wait until register_movies.log is created
      wait_for:
        path: /home/{{ ansible_user }}/register_movies.log
        state: present
        timeout: 90
      register: wait_result
      until: wait_result is succeeded
      retries: 3

    - name: Fetch register_movies.log
      fetch:
        src: /home/{{ ansible_user }}/register_movies.log
        dest: "{{ base_folder_dir }}/logs/register_movies_{{ inventory_hostname }}.log"
        flat: yes
